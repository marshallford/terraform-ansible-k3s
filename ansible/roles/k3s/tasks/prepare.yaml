- name: Ensure k3s directories exists
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: u=rwx,g=rx,o=
  loop:
  - "{{ __k3s_config_dir }}"
  - "{{ __k3s_files_dir }}"
  - "{{ __k3s_images_dir }}"
  - "{{ __k3s_kubelet_config_dir }}"
  - "{{ __k3s_staging_dir }}"

- name: Ensure k3s manifests directory exists
  ansible.builtin.file:
    path: "{{ __k3s_manifests_dir }}"
    state: directory
    mode: u=rwx,g=,o=
  when: __k3s_role == "server"

- name: Set k3s env file
  ansible.builtin.template:
    src: k3s.env.j2
    dest: "{{ __k3s_config_dir }}/k3s.env"
    mode: u=rw,g=,o=
  no_log: true

- name: Copy auto deployed manifests
  ansible.builtin.copy:
    content: "{{ item.value }}"
    dest: "{{ __k3s_manifests_dir }}/{{ item.key }}"
    mode: u=rw,g=,o=
  loop: "{{ __k3s_manifests | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  register: k3s_manifest_files
  when: __k3s_role == "server"

- name: Find existing auto deployed manifests
  ansible.builtin.find:
    paths: "{{ __k3s_manifests_dir }}"
    patterns: "*"
  register: __k3s_current_manifests_dir
  when: __k3s_role == "server"

- name: Prune auto deployed manifests
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ (__k3s_current_manifests_dir.files | map(attribute='path')) | difference(k3s_manifest_files.results | map(attribute='dest') | list) }}"
  loop_control:
    label: "{{ item | basename }}"
  when: __k3s_role == "server"

- name: Harden kernel parameters for kubelet
  ansible.builtin.template:
    src: 90-kubelet.conf.j2
    dest: /etc/sysctl.d/90-kubelet.conf
    mode: u=rw,g=,o=
  notify: Restart systemd-sysctl

- name: Check if k3s binary exists
  ansible.builtin.stat:
    path: "{{ __k3s_staging_dir }}/{{ __k3s_binary }}"
  register: k3s_binary

- name: Check if k3s images exists
  ansible.builtin.stat:
    path: "{{ __k3s_staging_dir }}/{{ __k3s_images }}"
  register: k3s_images

- name: Check if k3s selinux package exists
  ansible.builtin.stat:
    path: "{{ __k3s_staging_dir }}/{{ __k3s_selinux_package }}"
  register: k3s_selinux_package

- name: Check if k3s service is enabled
  ansible.builtin.command:
    cmd: systemctl is-enabled --quiet k3s-{{ __k3s_role }}.service # noqa:command-instead-of-module
  register: k3s_service_enabled
  failed_when: false
  changed_when: false

- name: Set k3s facts
  ansible.builtin.set_fact:
    k3s_staged: "{{ k3s_binary.stat.exists and k3s_images.stat.exists and k3s_selinux_package.stat.exists }}"
    k3s_installed: "{{ k3s_service_enabled.rc == 0 }}"
    k3s_arch: "{{ 'arm64' if ansible_facts.architecture == 'aarch64' else 'arm' if ansible_facts.architecture == 'armv7l' else 'amd64' }}"
